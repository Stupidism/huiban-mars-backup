# 理论上每一个请求都有遇到401, 500 等错误的可能, 就没有一一列出了,只列出了有特殊含义的
# 除了前六个API 其余的都需要权限验证

1. POST /users
  Request: {
    wechatId,
    phone,
    smsCode,
  }

  201 user

  400 { // 一个错误信息格式示例, 格式可以再商量
    type: 'Validation Error', // 提交的信息有误
    message: '',
    payload: user,
    errors: {
      phone: '手机号应为11位数字',
    }
  }

  409 {
    type: 'Duplicated Wechat Id',
  }

  409 {
    type: 'Duplicated Phone',
  }

1.1. GET /users/current
  Cookie: {
    access_token,
    wechatToken,
  }

  200 // 老用户已登陆

  401 // 老用户未登录

  404 // 新用户


2. POST /tokens
  Request: {
    type: 'wechat',
    wechatId,
    wechatToken,
    phone,
    smsCode: , // 微信登录时不需要短信验证码
  }

  201 {
    access_token,
    expires_at,
  }

2.1 POST /wechat_tokens
  Request: {
    wechatId,
    wechatToken,
  }

3. POST /smsCodes
  Request: {
    phone,
  }

  202 {
    createdAt,
  }

4. GET /meetings/:id

  200 {
    ...meeting,
    ticketGrades,
  }

4.1. GET /meetings


# 以下API全部需要在header中有Authorization: `Bearer ${accessToken}`

5. POST /orders

  Request: order {
    items: [{
      ticketGradeId,
      ticketPrice,
      ticketAmount,
      meetingId,
    }],
    meetingId,
    paymentMethodId,
  }

  201 {
    items,
    meetingId,
    paymentMethodId,
    duyPayment,
    status: '待支付',
    transaction: {
      thirdPartyTransactionInfo: {
        timeStamp:	String,	// 是	时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间
        nonceStr:	String,	// 是	随机字符串，长度为32个字符以下。
        package:	String,	// 是	统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*
        signType:	String,
        paySign: String,
      },
    },
  }

  400 {
    type: 'No Stock', // 库存用光了,
    payload: order,
    errors: {
      items: [{
        amount,
      }],
    }
  }

5.1. GET /orders
  200 orders

5.2. GET /orders/:id
  200 order

5.3. PATCH /orders/:id  // 唯一能做的操作就是把状态从‘待支付’改成‘已取消’
  Request {
    status: '已取消',
  }

  200 {
    ...order,
    status: '已取消',
  }

6. GET /payment_methods
  200 paymentMethods

7. POST /transactions  // 具体第三方支付API如何设计有待商量

  Request: {
    orderId,
  }

  201 {
    orderId,
    amount,
    thirdPartyPayeeId,
    paymentMethodId,
  }

7.1. POST /third_party_transactions
  Request: {
    orderId,
    transactionId,
  }

8. GET /tickets

8.1. GET /tickets/:id

8.2. PATCH /tickets/:id // 唯一能做的是添加新的与会人
  Request {
    participant,
  }

  409: {
    type: 'One for One',
    message: '对于任意一个会议, 一个用户只能拥有的一个参会名额',
  }

  410: {
    type: 'Already Taken',
    message: '门票已被他人领取',
  }

用到的HTTP status code:
200 OK
201 Created
202 Accepted
206 Partial Content
400 Bad Request
401 Unauthorized
404 Not Found
409 Conflict
410 Gone
