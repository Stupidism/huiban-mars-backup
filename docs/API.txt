# 理论上每一个请求都有遇到401, 500 等错误的可能, 就没有一一列出了,只列出了有特殊含义的
# 除了前六个API 其余的都需要权限验证

@Authorized:
  Header: {
    Authorization: `Bearer ${accessToken}`
  }

1. POST /users
  // 认证是可选的, 如果有 token, 应该自动绑定 openId 和 accessToken
  @Authorized

  Request: {
    type: 'smsCode' || 'wechatPhoneNumber'
    // 当 type === 'smsCode' 下面两个字段必选
    phone,
    smsCode,
    // 当 type === 'wechatPhoneNumber' 下面两个字段必选
    encryptedData,
    iv,

    // 以下字段全部可选
    wechatName,
    wechatAvatar,
    city,
    name,
    position,
    company,
  }

  201 {
    id,
    phone,
  }

  400 { // 一个错误信息格式示例, 格式可以再商量
    type: 'Validation Error', // 提交的信息有误
    message: '',
    payload: user,
    errors: {
      phone: '手机号应为11位数字',
    }
  }

  409 {
    type: 'Duplicated Wechat Id',
  }

  409 {
    type: 'Duplicated Phone',
  }

1.1. GET /users/current
  @Authorized

  // accessToken 有效 返回已有用户信息
  200 {
    id,
    phone,
  }

  204 // accessToken 有效 用户尚未注册

  404 // accessToken 无效 用户未登录或尚未注册

1.2 PUT /users/:id
  @Authorized

  Request: {
    wechatName,
    wechatAvatar,
    city,
    name,
    position,
    company,
  }

2. POST /tokens
  Request: {
    type: 'wechat' || 'phone',
    wechatCode,
    phone,
    smsCode: , // 微信登录时不需要短信验证码
  }

  201 {
    access_token,
    expires_at,
  }

3. POST /sms_codes
  Request: {
    phone,
  }

  202 {
    createdAt,
  }

4. GET /meetings/:id

  200 {
    ...meeting,
    ticketGrades,
  }

4.1. GET /meetings


5. POST /orders
  @Authorized

  Request: order {
    items: [{
      ticketGradeId,
      ticketPrice,
      ticketAmount,
      meetingId,
    }],
    meetingId,
    paymentMethodId,
    selfParticipate,
  }

  201 {
    items,
    meetingId,
    paymentMethodId,
    duyPayment,
    status: '待支付',
    transaction: {
      thirdPartyTransactionInfo: {
        timeStamp:	String,	// 是	时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间
        nonceStr:	String,	// 是	随机字符串，长度为32个字符以下。
        package:	String,	// 是	统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*
        signType:	String,
        paySign: String,
      },
    },
  }

  400 {
    type: 'No Stock', // 库存用光了,
    payload: order,
    errors: {
      items: [{
        amount,
      }],
    }
  }

5.1. GET /orders
  @Authorized
  200 orders

5.2. GET /orders/:id
  @Authorized
  200 order

5.3. PUT /orders/:id  // 唯一能做的操作就是把状态从‘待支付’改成‘已取消’
  @Authorized
  Request {
    status: '已取消',
  }

  200 {
    ...order,
    status: '已取消',
  }

6. GET /payment_methods
  @Authorized
  200 paymentMethods

7. POST /transactions  // 具体第三方支付API如何设计有待商量
  @Authorized

  Request: {
    orderId,
  }

  201 {
    orderId,
    amount,
    thirdPartyPayeeId,
    paymentMethodId,
  }

7.1. POST /third_party_transactions
  @Authorized
  Request: {
    orderId,
    transactionId,
  }

8. GET /tickets
  @Authorized
  200 [{
    buyerId,
    buyerName,
    participantId,
    participantName,
    ...
  }]

8.1. GET /tickets/:id
  @Authorized

  200: ticket

  // 当非购买者用户已经拥有一张此会议的门票的时候
  403: {
    type: 'One for One',
    message: '您已经拥有一张此会议的门票',
    data: { meetingId },
  }

  410: {
    type: 'Already Taken',
    message: '门票已被他人领取',
    data: { meetingId },
  }

8.2. PUT /tickets/:id // 唯一能做的是添加新的与会人
  @Authorized
  Request {
    participantId,
  }

  409: {
    type: 'One for One',
    message: '对于任意一个会议, 一个用户只能拥有的一个参会名额',
    data: { meetingId }
  }

  410: {
    type: 'Already Taken',
    message: '门票已被他人领取',
    data: { meetingId },
  }

9. GET /locations/:id

10. GET /meetings/:id/page

用到的HTTP status code:
200 OK
201 Created
202 Accepted
206 Partial Content
400 Bad Request
401 Unauthorized
404 Not Found
409 Conflict
410 Gone

统一的API要求:
# 这里的resources 泛指任意 RESTful 资源

1. 分页
1.1 GET /resources?skip&limit&withTotalCount

skip: 跳过前skip数量的resource, 一般固定每页数量分页时候 skip = 一页的大小 * (当前页数 - 1)
limit: 一页的大小
withTotalCount: 在response的header中附加上当前筛选条件下这个resources的总数, key为 'X-TOTAL-COUNT'

2. 级联
当资源需要级联时, 需要前端指定级联的目标, 在query中用populate参数

2.1 GET /resources/:id?populate=foo
  200 {
    id,
    fooId,
    foo: {},
    barId,
  }

2.1.1 GET /resources/:id
  200 {
    id,
    fooId,
    barId,
  }

2.2 GET /resources?populate=foo
  200 [{
    id,
    fooId,
    foo: {},
    barId,
  }]

2.2 POST /resources?populate=foo
  Request {
    fooId,
    barId,
  }
  200 {
    id,
    fooId,
    foo: {},
    barId,
  }

3. 过滤(TODO)
4. 排序(TODO)
