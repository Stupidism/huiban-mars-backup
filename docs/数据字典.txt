# 下文中大写开头为数据库的一个表或集,也可以作为字段的一种数据类型,可以理解为关系型数据库中的外链
# {} 中的内容表示其字段, 以,和换行符分隔, 每一行是对一个字段的描述
# : 左边是字段名 右边是数据类型
# // 及其后面的内容是注释
# Runtime是一种特殊类型,可以动态计算出来,而且由于高频修改导致的数据一致性问题,不宜存储在数据库中,宜用缓存处理

User {
  id: UUID,
  name: String,
  wechatId: String,
  phone: String,

  wechatName: String,
  wechatAvatar: Url，
  wechatCity: String,
  wechatProvince: Url，

  email: String,
  company: String,
  position: String,
  city: String,
}

Meeting {
  topic: String, // 主题
  englishTopic: String, // 英文主题
  bannerImg: Url, // 横幅图片
  coverImg: Url,
  invitationCardImg: Url,
  host: String, // 主办方
  mainSpeaker: String, // 主讲人
  hostLink: Url, //主办方链接
  publicityPage: PublicityPage, // 宣传页配置
  location: Location, // 地点
  enrollEndAt: TimeStamp, // 报名截止时间
  holdAt: TimeStamp, // 举办时间
  status: Runtime('enrolling' | 'enrollment_closed' | 'expired'), // 状态
  statusDesc: Runtime('报名中' | '报名截止' | '过期') // 状态描述
}

TicketGrade { // 票档
  meeting: Meeting,
  type: String, // 由主办方决定Enum('早鸟票' | 'VIP票' | '贵宾票'),
  typeColor: Enum('blue' | 'green' | 'orange' | 'purple' | 'black'),
  price: Number, // 单位:分
  desc: String,
  amount: Number,
  restAmount: Runtime, // = ticket.amount - Tickets.count({ meeting, ticket })
}

Order {
  user: User,
  meeting: Meeting,
  selfParticipate, // 如为true, 将自动生成一张用户自己参加的门票
  items: Runtime(Array<OrderItem>), // 获取order的时候需要级联出来

  status: Enum('to_be_paid' | 'completed' | 'cancelled' | 'closed'),
  statusDesc: Enum('待支付' | '已完成' | '已取消' | '已关闭'), // 已关闭由各种过期时间计算得出
  userName: String,
  userPhone: String,
  duePayment: Number,
  paymentMethod: PaymentMethod,

  transaction: Transaction,
  actualPayment: Number,

  createdAt: TimeStamp, // 比如在a时间创建,1天没有确认,后端可以或前端自己可以算出已过期
  payedAt: TimeStamp,
  deletedAt: TimeStamp,
  finishedAt: TimeStamp,
  cancelledAt: TimeStamp
}

OrderItem {
  order: Order,
  meeting: Meeting, // 可能因查询需要 冗余
  ticketGrade: TicketGrade,
  ticketAmount: Number,
  ticketPrice: Number,
  ticketGradeType: String,
  ticketGradeTypeColor: String,
}

PaymentMethod {
  type: Enum('wechat' | 'alipay'),
  typeDesc: Enum('微信' | '支付宝'),
  desc: String,
  iconImg: Url,
  thirdPartyPayeeId: String,
}

Ticket {
  buyer: User,
  participant: User,
  price: Number,
  gradeType: String,
  gradeTypeColor: String,
  type: Enum('bought_ticket' | 'gift_ticket'),
  typeDesc: Enum('购票' | '赠票'),
  status: Enum('no_participant' | 'has_participant'),
  statusDesc: Enum('未确认' | '已确认'),
  meeting: Meeting,
  order: Order,
  ticketGrade: TicketGrade,
  adminssionQrCode: Url, // 入场二维码  静态二维码 + 小程序隐藏页面 => 动态二维码 + 单独举办方后台小程序
  invitationCardImg:: Url, // 邀请函图片
}

Transaction {
  amount: Number,
  order: Order,
  paymentMethod: PaymentMethod,
  thirdPartyTransactionId: String,
  thirdPartyTransactionInfo: String, // 如微信就是JSON.stringify(WechatTransaction)
  status: Enum('to_be_paid' | ‘failed’ | ‘succeeded’)，
  statusDesc: Enum('待支付' | ‘已失败’ | ‘已成功’)，
  wechatErrorCode: String,
  wechatErrorMessage: String,
  createdAt: TimeStamp,
  expiresAt: TimeStamp,
}

WechatTransaction {
  timeStamp:	String,	// 是	时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间
  nonceStr:	String,	// 是	随机字符串，长度为32个字符以下。
  package:	String,	// 是	统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*
  signType:	String,
  paySign: String,
}

AlipayTransaction {
  // TODO
}

SmsCode {
  code: Number,
  type: Enum('login')，
  typeDesc: Enum('登录')，
  user: User,
  expiresAt: TimeStamp,
}

Location {
  place: String, // 地点名称
  address: String, // 详细地址
  latitude: Number, // 地址纬度
  longitude: Number, // 地址经度
}

PublicityPage {
  type: Enum('meeting'),
  config: {
    theme,
  },
  modules: Array<PosterModule>,
}

PublicityPageModule {
  type: Enum('cover' | 'button' | 'introduction' | 'guests' | 'agenda' | 'location' | 'Q&A' | 'partners' | 'aboutUs' | 'contactUs'),
  config: {
    image: Url,
    qrCode: Url,
    link: Url,
    position: Enum('rightBottom'),
    content: String,

    guests: [{
      avatar: Url,
      name: String,
      introduction: String,
    }],
    schedules: [{
      title: String,
      subtitle: String,
      topic: String,
      mainSpeaker: String,
      introduction: String,
    }],
    locationId: String,
    // location: Location,
    questions: [{
      statement: String,
      answer: String,
    }],
    partners: [{
      type: Enum('principal' | 'media' | 'co-organizer'),
      squareLogo: Url,
      link: Url,
    }],
    contacts: [{
      name: String,
      email: String,
      scope: String,
    }]
  }
}

Example:
  {
    type: cover,
    image,
  }

  {
    type: button,
    position,
    image,
    link, // 小程序内打开页面
    qrCode, // 给 h5 打开小程序用
  }

  {
    type: introduction,
    content,
  }

  {
    type: guests,
    guests,
  }

  {
    type: agenda,
    schedules,
  }

  {
    type: location,
    image,
    locationId,
  }

  {
    type: Q&A,
    questions,
  }

  {
    type: partners,
    partners,
  }

  {
    type: aboutUs,
    content,
    qrCode,
  }

  {
    type: contactUs,
    contacts,
  }
